// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.1.0.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ['/Users/elias/miniconda3/envs/fenics_x64/include'
//                                  , '/Users/elias/miniconda3/envs/fenics_x64/include
//                                  /eigen3', '/Users/elias/miniconda3/envs/fenics_x64
//                                  /include']
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   False
//  format:                         'ufc'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  no-evaluate_basis_derivatives:  True
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#include "ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7.h"

// Based on https://gcc.gnu.org/wiki/Visibility
#if defined _WIN32 || defined __CYGWIN__
    #ifdef __GNUC__
        #define DLL_EXPORT __attribute__ ((dllexport))
    #else
        #define DLL_EXPORT __declspec(dllexport)
    #endif
#else
    #define DLL_EXPORT __attribute__ ((visibility ("default")))
#endif

ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_cell_integral_main_otherwise::ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_cell_integral_main_otherwise() : ufc::cell_integral()
{

}

ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_cell_integral_main_otherwise::~ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_cell_integral_main_otherwise()
{

}

const std::vector<bool> & ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_cell_integral_main_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true, true, true, true, true});
return enabled;
}

void ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_cell_integral_main_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 7
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 7
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           7
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights16[16] = { 0.02356836819338231, 0.03538806789808593, 0.02258404928236992, 0.00542322591052525, 0.04418508852236171, 0.06634421610704974, 0.0423397245217463, 0.01016725956447878, 0.04418508852236171, 0.06634421610704974, 0.0423397245217463, 0.01016725956447878, 0.02356836819338231, 0.03538806789808593, 0.02258404928236992, 0.00542322591052525 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE18_C0_D01_Q16[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE18_C0_Q16[1][16][3] =
        { { { 0.877428809330468, 0.06546699455501448, 0.05710419611451761 },
            { 0.6729468631505064, 0.05021012321136979, 0.2768430136381238 },
            { 0.3874974834066942, 0.02891208422438898, 0.5835904323689167 },
            { 0.1300560792168344, 0.009703785126946196, 0.8602401356562195 },
            { 0.6317312516411253, 0.3111645522443571, 0.05710419611451761 },
            { 0.4845083266304333, 0.2386486597314429, 0.2768430136381237 },
            { 0.2789904634965088, 0.1374191041345744, 0.5835904323689167 },
            { 0.09363778443732851, 0.04612207990645212, 0.8602401356562195 },
            { 0.3111645522443571, 0.6317312516411253, 0.05710419611451761 },
            { 0.238648659731443, 0.4845083266304333, 0.2768430136381238 },
            { 0.1374191041345744, 0.2789904634965088, 0.5835904323689167 },
            { 0.04612207990645206, 0.09363778443732856, 0.8602401356562195 },
            { 0.06546699455501448, 0.877428809330468, 0.05710419611451761 },
            { 0.05021012321136983, 0.6729468631505063, 0.2768430136381237 },
            { 0.02891208422438898, 0.3874974834066942, 0.5835904323689167 },
            { 0.009703785126946085, 0.1300560792168345, 0.8602401356562195 } } };
    alignas(32) static const double FE3_C0_Q16[1][16][6] =
        { { { 0.6623338215556972, -0.05689513980288186, -0.05058241768674708, 0.01495376038439036, 0.2004194672181389, 0.2297705083314024 },
            { 0.2327680980977065, -0.04516801026556791, -0.123558905237647, 0.05560128729990844, 0.7452025504516331, 0.1351549796539669 },
            { -0.08718888411365164, -0.02724026699599273, 0.09756515313616176, 0.06749126293279084, 0.904559295532719, 0.04481343950797258 },
            { -0.09622691173432325, -0.009515458235366245, 0.6197860463314424, 0.03339034173593181, 0.4475178369136223, 0.005048144988693132 },
            { 0.1664374969590004, -0.1175177950974946, -0.05058241768674708, 0.07107520646099133, 0.1442980211415379, 0.7862894882227121 },
            { -0.01501168948198789, -0.1247422941482148, -0.123558905237647, 0.2642728566430071, 0.5365309811085341, 0.4625090511163082 },
            { -0.1233191060525151, -0.0996510837722764, 0.09756515313616176, 0.3207858975905817, 0.6512646608749281, 0.1533544782231197 },
            { -0.07610171508866519, -0.04186758739665776, 0.6197860463314424, 0.1587042571018933, 0.3222039215476609, 0.01727507750432652 },
            { -0.1175177950974945, 0.1664374969590003, -0.05058241768674708, 0.1442980211415382, 0.07107520646099121, 0.7862894882227121 },
            { -0.1247422941482147, -0.01501168948198808, -0.123558905237647, 0.5365309811085343, 0.2642728566430072, 0.4625090511163084 },
            { -0.09965108377227623, -0.1233191060525152, 0.09756515313616176, 0.6512646608749282, 0.3207858975905816, 0.1533544782231197 },
            { -0.04186758739665759, -0.0761017150886653, 0.6197860463314424, 0.3222039215476611, 0.1587042571018928, 0.01727507750432652 },
            { -0.05689513980288174, 0.6623338215556972, -0.05058241768674708, 0.2004194672181392, 0.01495376038439024, 0.2297705083314024 },
            { -0.04516801026556773, 0.2327680980977063, -0.123558905237647, 0.745202550451633, 0.0556012872999084, 0.135154979653967 },
            { -0.02724026699599253, -0.08718888411365174, 0.09756515313616176, 0.9045592955327191, 0.06749126293279076, 0.04481343950797258 },
            { -0.009515458235366009, -0.09622691173432342, 0.6197860463314424, 0.4475178369136227, 0.03339034173593125, 0.005048144988693076 } } };
    // Unstructured piecewise computations
    const double w4_d1_c0 = w[4][0] * FE18_C0_D01_Q16[0][0][0] + w[4][2] * FE18_C0_D01_Q16[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE18_C0_D01_Q16[0][0][0] + coordinate_dofs[2] * FE18_C0_D01_Q16[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE18_C0_D01_Q16[0][0][0] + coordinate_dofs[5] * FE18_C0_D01_Q16[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE18_C0_D01_Q16[0][0][0] + coordinate_dofs[4] * FE18_C0_D01_Q16[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE18_C0_D01_Q16[0][0][0] + coordinate_dofs[3] * FE18_C0_D01_Q16[0][0][1];
    double w4_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w4_d0_c0 += w[4][ic] * FE18_C0_D01_Q16[0][0][ic];
    const double w4_d1_c1 = w[4][3] * FE18_C0_D01_Q16[0][0][0] + w[4][5] * FE18_C0_D01_Q16[0][0][1];
    double w4_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w4_d0_c1 += w[4][ic + 3] * FE18_C0_D01_Q16[0][0][ic];
    const double J_c0 = coordinate_dofs[0] * FE18_C0_D01_Q16[0][0][0] + coordinate_dofs[2] * FE18_C0_D01_Q16[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE18_C0_D01_Q16[0][0][0] + coordinate_dofs[5] * FE18_C0_D01_Q16[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE18_C0_D01_Q16[0][0][0] + coordinate_dofs[4] * FE18_C0_D01_Q16[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE18_C0_D01_Q16[0][0][0] + coordinate_dofs[3] * FE18_C0_D01_Q16[0][0][1];
    alignas(32) double sp[23];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = w4_d1_c0 * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = w4_d0_c0 * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = w4_d1_c1 * sp[3];
    sp[9] = w4_d0_c1 * sp[5];
    sp[10] = sp[8] + sp[9];
    sp[11] = J_c3 / sp[2];
    sp[12] = w4_d0_c0 * sp[11];
    sp[13] = -1 * J_c2 / sp[2];
    sp[14] = w4_d1_c0 * sp[13];
    sp[15] = sp[12] + sp[14];
    sp[16] = w4_d0_c1 * sp[11];
    sp[17] = w4_d1_c1 * sp[13];
    sp[18] = sp[16] + sp[17];
    sp[19] = J_c0 * J_c3;
    sp[20] = J_c1 * J_c2;
    sp[21] = sp[19] + -1 * sp[20];
    sp[22] = std::abs(sp[21]);
    alignas(32) double BF0[3] = {};
    alignas(32) double BF1[3] = {};
    for (int iq = 0; iq < 16; ++iq)
    {
        // Quadrature loop body setup (num_points=16)
        // Unstructured varying computations for num_points=16
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c0 += w[1][ic] * FE3_C0_Q16[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c1 += w[1][ic + 6] * FE3_C0_Q16[0][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE3_C0_Q16[0][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE3_C0_Q16[0][iq][ic];
        double w0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0 += w[0][ic] * FE3_C0_Q16[0][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3 += w[3][ic] * FE3_C0_Q16[0][iq][ic];
        alignas(32) double sv16[19];
        sv16[0] = w1_c0 * sp[7];
        sv16[1] = w1_c1 * sp[10];
        sv16[2] = sv16[0] + sv16[1];
        sv16[3] = w2_c0 * sp[15];
        sv16[4] = w2_c1 * sp[18];
        sv16[5] = sv16[3] + sv16[4];
        sv16[6] = sv16[2] + sv16[5];
        sv16[7] = w0 * w3;
        sv16[8] = 0.3875968992248062 * sv16[6] * sv16[7];
        sv16[9] = w1_c0 * sp[15];
        sv16[10] = w1_c1 * sp[18];
        sv16[11] = sv16[9] + sv16[10];
        sv16[12] = w2_c0 * sp[7];
        sv16[13] = w2_c1 * sp[10];
        sv16[14] = sv16[12] + sv16[13];
        sv16[15] = sv16[11] + 0.29 * sv16[14];
        sv16[16] = 1.091822251337482 * sv16[15] * sv16[7];
        sv16[17] = sv16[8] * sp[22];
        sv16[18] = sv16[16] * sp[22];
        const double fw0 = sv16[18] * weights16[iq];
        for (int i = 0; i < 3; ++i)
            BF0[i] += fw0 * FE18_C0_Q16[0][iq][i];
        const double fw1 = sv16[17] * weights16[iq];
        for (int i = 0; i < 3; ++i)
            BF1[i] += fw1 * FE18_C0_Q16[0][iq][i];
    }
    std::fill(A, A + 6, 0.0);
    for (int i = 0; i < 3; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 3; ++i)
        A[i + 3] += BF1[i];
}

extern "C" DLL_EXPORT ufc::cell_integral * create_ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_cell_integral_main_otherwise()
{
  return new ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_cell_integral_main_otherwise();
}


ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main() : ufc::form()
{
    // Do nothing
}

ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::~ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main()
{
    // Do nothing
}

const char * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::signature() const
{
    return "6526ddd7392e5571db8b5ecad150971883be19692d45a061db2012574fd4640269a33866c13535e13e54c00d3499c9439b9c716b065680955f5c8fbdf4c84dce";
}

std::size_t ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::rank() const
{
    return 1;
}

std::size_t ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::num_coefficients() const
{
    return 5;
}

std::size_t ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::original_coefficient_position(std::size_t i) const
{
    if (i >= 5)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3, 4};
    return position[i];
}

ufc::finite_element * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::create_coordinate_finite_element() const
{
    return create_ffc_element_c110a81c7fa17dc9a56255bf97b4837dd966a189_finite_element_main();
}

ufc::dofmap * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::create_coordinate_dofmap() const
{
    return create_ffc_element_c110a81c7fa17dc9a56255bf97b4837dd966a189_dofmap_main();
}

ufc::coordinate_mapping * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::create_coordinate_mapping() const
{
    return create_ffc_coordinate_mapping_24e839e2a649e3de9bf7e27ba083837d6f2b3545_coordinate_mapping_main();
}

ufc::finite_element * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return create_ffc_element_c110a81c7fa17dc9a56255bf97b4837dd966a189_finite_element_main();
    case 1:
        return create_ffc_element_7e652f80b99bee028884b0dd1e484ebf288f86cc_finite_element_main();
    case 2:
        return create_ffc_element_352d5db2ae4d971c11b4f6dec58cc6cf981e71ee_finite_element_main();
    case 3:
        return create_ffc_element_352d5db2ae4d971c11b4f6dec58cc6cf981e71ee_finite_element_main();
    case 4:
        return create_ffc_element_7e652f80b99bee028884b0dd1e484ebf288f86cc_finite_element_main();
    case 5:
        return create_ffc_element_c110a81c7fa17dc9a56255bf97b4837dd966a189_finite_element_main();
    default:
        return nullptr;
    }
}

ufc::dofmap * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return create_ffc_element_c110a81c7fa17dc9a56255bf97b4837dd966a189_dofmap_main();
    case 1:
        return create_ffc_element_7e652f80b99bee028884b0dd1e484ebf288f86cc_dofmap_main();
    case 2:
        return create_ffc_element_352d5db2ae4d971c11b4f6dec58cc6cf981e71ee_dofmap_main();
    case 3:
        return create_ffc_element_352d5db2ae4d971c11b4f6dec58cc6cf981e71ee_dofmap_main();
    case 4:
        return create_ffc_element_7e652f80b99bee028884b0dd1e484ebf288f86cc_dofmap_main();
    case 5:
        return create_ffc_element_c110a81c7fa17dc9a56255bf97b4837dd966a189_dofmap_main();
    default:
        return nullptr;
    }
}

std::size_t ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::max_overlap_subdomain_id() const
{
    return 0;
}

bool ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::has_cell_integrals() const
{
    return true;
}

bool ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::has_exterior_facet_integrals() const
{
    return false;
}

bool ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::has_interior_facet_integrals() const
{
    return false;
}

bool ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::has_vertex_integrals() const
{
    return false;
}

bool ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::has_custom_integrals() const
{
    return false;
}

bool ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::has_cutcell_integrals() const
{
    return false;
}

bool ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::has_interface_integrals() const
{
    return false;
}

bool ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::create_default_cell_integral() const
{
    return create_ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_cell_integral_main_otherwise();
}

ufc::exterior_facet_integral * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main::create_default_overlap_integral() const
{
    return nullptr;
}

extern "C" DLL_EXPORT ufc::form * create_ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main()
{
  return new ffc_form_4447805b25727a7ea1273b55e74c7015436d4bc7_form_main();
}

